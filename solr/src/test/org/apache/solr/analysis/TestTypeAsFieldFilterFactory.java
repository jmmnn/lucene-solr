package org.apache.solr.analysis;import java.io.StringReader;import java.util.Collection;import java.util.HashMap;import java.util.HashSet;import java.util.Map;import java.util.Set;import org.apache.lucene.analysis.TokenStream;import org.apache.lucene.analysis.standard.StandardAnalyzer;import org.apache.lucene.analysis.standard.StandardTokenizer;import org.apache.lucene.util.Version;import org.apache.solr.common.SolrInputDocument;import junit.framework.TestCase;public class TestTypeAsFieldFilterFactory extends TestCase {    String inputString = "This is a test - test@example.com 10.0.0.1 end.";  public void testBasicSetup() throws Exception {    Map<String, String> args = new HashMap<String, String>();    SolrInputDocument doc = new SolrInputDocument();    process(doc, args);    Collection<Object> fields = doc.getFieldValues(TypeAsFieldFilterFactory.DEFAULT_FIELD);    assertNotNull("should have new fields", fields);    Set values = new HashSet(fields);    assertTrue(values.contains("10.0.0.1"));    assertTrue(values.contains("This is a test end"));    assertTrue(values.contains("test@example.com"));    // make sure there are no other fields    assertEquals(doc.getFieldNames().size(), 1);  }    public void testSplitSetup() throws Exception {    Map<String, String> args = new HashMap<String, String>();    args.put(TypeAsFieldFilterFactory.FIELD, "split_s");    args.put(TypeAsFieldFilterFactory.SPLIT_TYPES, "<HOST> <EMAIL>");    args.put(TypeAsFieldFilterFactory.IGNORE_TYPES, "<HOST>");    SolrInputDocument doc = new SolrInputDocument();    process(doc, args);    Collection<Object> fields = doc.getFieldValues(TypeAsFieldFilterFactory.DEFAULT_FIELD);    assertNull(fields);    fields = doc.getFieldValues("split_s");    assertEquals(2, fields.size());    assertTrue(fields.contains("This is a test end"));    assertTrue(fields.contains("10.0.0.1"));    // ignored field    fields = doc.getFieldValues("_host__split_s");    assertNull(fields);    fields = doc.getFieldValues("_email__split_s");    assertEquals(1, fields.size());    assertTrue(fields.contains("test@example.com"));  }    private void process(SolrInputDocument doc, Map<String, String> args) throws Exception {    TypeAsFieldFilterFactory factory = new TypeAsFieldFilterFactory();    factory.init(args);    factory.setSolrInputDocument(doc);    TokenStream input = new StandardTokenizer(Version.LUCENE_40, new StringReader(inputString));    TokenStream out = factory.create(input);    while (out.incrementToken()) {      ;    }    out.end();      }}