package org.apache.solr.analysis;import java.util.Arrays;import java.util.HashSet;import java.util.Map;import java.util.Set;import org.apache.lucene.analysis.TokenStream;import org.apache.solr.common.SolrInputDocument;/** * Factory for {@link TypeAsFieldFilter}. Filters produced by this factory * may modify the {@link SolrInputDocument} fields. * <p>Configuration of this factory consists of the following parameters: * <ul> * <li><code>field</code> - suffix (or field name) of new field(s) created in * the input document. Default value of this parameter is * <code>type_s</code>.</li> * <li><code>splitTypes</code> - space-separated list of token types that * should be collected into separate fields based on their type, each field * created with a name of <code>type_field</code>. Tokens with other types * will be collected in a single field with the name defined in * <code>field</code> parameter. Default value is an empty list, i.e. all * types will be collected in a single field named <code>type_s</code>.</li> * <li><code>ignoreTypes</code> - space-separated list of token types that * will be ignored, ie. tokens with these types won't be added to any new * field. Default value is an empty list, i.e. all token types will be * collected.</li> * </ul> */public class TypeAsFieldFilterFactory extends DocumentAlteringFilterFactory {    public static final String FIELD = "field";  public static final String DEFAULT_FIELD = "type_s";  public static final String SPLIT_TYPES = "splitTypes";  public static final String IGNORE_TYPES = "ignoreTypes";      private String fieldName = DEFAULT_FIELD;  private Set<String> splitTypes = new HashSet<String>();  private Set<String> ignoreTypes = new HashSet<String>();  @Override  public void init(Map<String, String> args) {    super.init(args);    String f = args.get(FIELD);    if (f != null) {      fieldName = f;    }    f = args.get(SPLIT_TYPES);    if (f != null) {      String[] types = f.split("\\s+");      splitTypes.addAll(Arrays.asList(types));    }    f = args.get(IGNORE_TYPES);    if (f != null) {      String[] types = f.split("\\s+");      ignoreTypes.addAll(Arrays.asList(types));    }  }  @Override  public TokenStream create(TokenStream input) {    return new TypeAsFieldFilter(input, solrDocument, fieldName,            splitTypes, ignoreTypes);  }}